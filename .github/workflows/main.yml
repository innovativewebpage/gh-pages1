name: Build and Deploy to AWS

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm ci

      - name: Build React app
        run: npm run build

      - name: Run SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@v5.0.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy to S3
        run: |
          aws s3 sync build/ s3://${{ secrets.S3_BUCKET }} --delete
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}

      # üß† Debug step ‚Äî run this once to confirm AWS + CloudFront setup
      - name: Debug AWS identity and CloudFront (one-time)
        run: |
          set -eux
          echo "üîç Checking which AWS account this runner is using..."
          aws sts get-caller-identity
          echo ""
          echo "üßæ CloudFront Distribution ID: $CLOUDFRONT_DISTRIBUTION_ID"
          echo "CF Dist ID length: ${#CLOUDFRONT_DISTRIBUTION_ID}"
          echo ""
          echo "üìú Listing all CloudFront distributions visible to this user..."
          aws cloudfront list-distributions --query "DistributionList.Items[].{Id:Id,Domain:DomainName}" --output table || echo "‚ö†Ô∏è No distributions found!"
          echo ""
          echo "üîé Fetching distribution details by ID..."
          aws cloudfront get-distribution --id "$CLOUDFRONT_DISTRIBUTION_ID" --no-paginate || echo "‚ùå Distribution not found or permission denied!"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
          CLOUDFRONT_DISTRIBUTION_ID: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}

      # üöÄ CloudFront invalidation (final deployment step)
      - name: Invalidate CloudFront cache
        run: |
          echo "üöÄ Invalidating CloudFront cache for distribution: $CLOUDFRONT_DISTRIBUTION_ID"
          aws cloudfront create-invalidation \
            --distribution-id "${CLOUDFRONT_DISTRIBUTION_ID}" \
            --paths "/*"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
          CLOUDFRONT_DISTRIBUTION_ID: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}
